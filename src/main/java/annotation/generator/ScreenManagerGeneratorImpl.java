package annotation.generator;

import static util.Utils.PACKAGE_NAME;
import annotation.AutoGenerated;
import annotation.generator.interfaces.ScreenManagerGenerator;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import java.util.List;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Modifier;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.apache.commons.lang3.StringUtils;
import util.Logger;

@RequiredArgsConstructor
public class ScreenManagerGeneratorImpl implements ScreenManagerGenerator {

    private final RoundEnvironment roundEnv;
    private final SpecsCreator specsCreator;
    private final ProcessingEnvironment processingEnvironment;
    private final Logger log;

    @Override
    public void generateScreenManager() {
        log.debug("Starting generateScreenManager");
        List<MethodSpec> methodSpecs = this.roundEnv.getElementsAnnotatedWith(AutoGenerated.class).stream()
            .filter(method -> !StringUtils.containsIgnoreCase(method.toString(), "widget"))
            .map(specsCreator::generateScreenMethods)
            .toList();

        TypeSpec screenManagerSpec = TypeSpec.classBuilder("ScreenManager")
            .addModifiers(Modifier.PUBLIC)
            .addMethods(methodSpecs)
            .build();
        writeClass(screenManagerSpec);
        log.debug("Finished generateScreenManager");
    }

    @SneakyThrows
    private void writeClass(TypeSpec typeSpec) {
        log.debug("Writing class: " + typeSpec.name);
        JavaFile.builder(PACKAGE_NAME, typeSpec).build().writeTo(this.processingEnvironment.getFiler());
    }
}
