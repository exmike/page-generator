package annotation.generator;

import static util.Utils.PACKAGE_NAME;
import annotation.AutoGenerated;
import com.codeborne.selenide.appium.SelenideAppiumElement;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;
import java.util.ArrayList;
import java.util.List;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.VariableElement;
import model.Page;
import model.WidgetModel;

public class SpecsCreator {

    /*
    Собираем спеку для создания классов в которой хранится вся информация собранная ранее
     */
    public TypeSpec.Builder getTypeSpecFromPage(Page page) {
        return TypeSpec.classBuilder(page.getPageName())
            .addModifiers(Modifier.PUBLIC)
            .addFields(getFieldsSpecByPage(page.getFields()))
            .addMethods(page.getMethodSpecs())
            .addAnnotation(AutoGenerated.class);
    }

    /*
    Метод для генерации новых методов
     */
    //todo потом реализовать добавление аннотации
    public MethodSpec.Builder getMethodSpecWithoutParams(ExecutableElement method, VariableElement field, Page page,
        WidgetModel widget) {
        return defaultMethodSpecBuilder(method, field, page, widget)
            .addStatement(
                "new $T(" + field.getSimpleName() + ")." + method.getSimpleName() + "()", widget.getType())
            .addStatement("return this");
    }

    public MethodSpec.Builder getMethodSpecWithParams(ExecutableElement method, VariableElement field, Page page,
        WidgetModel widget) {
        List<ParameterSpec> parameterSpecs = paramSpec(method);
        return defaultMethodSpecBuilder(method, field, page, widget)
            .addParameters(parameterSpecs)
            .addStatement(
                "new $T(" + field.getSimpleName() + ")." + method.getSimpleName() + "(" + kek(parameterSpecs) + ")",
                widget.getType())
            .addStatement("return this");

    }

    public MethodSpec.Builder getMethodSpecWithTypeParams(ExecutableElement method, VariableElement field, Page page,
        WidgetModel widget) {
        return getMethodSpecWithParams(method, field, page, widget)
            .addTypeVariable(TypeVariableName.get("T"));
    }

    /*
    из метода берем все параметры и делаем из них спеки
     */
    private List<ParameterSpec> paramSpec(ExecutableElement method) {
        List<ParameterSpec> parameterSpecs = new ArrayList<>();
        method.getParameters().forEach(param -> parameterSpecs.add(ParameterSpec.get(param)));
        return parameterSpecs;
    }

    //todo rename mb rework
    private String kek(List<ParameterSpec> parameterSpecs) {
        List<String> names = new ArrayList<>();
        parameterSpecs.forEach(parameterSpec -> names.add(parameterSpec.name));
        //[aboba],[kek] -> aboba, kek
        return names.toString().replace("[", "").replace("]", "");
    }

    /*
    Собираем поля класса с типом SelenideAppiumElement и добавляем к ним аннотации для поиска элементов
     */
    private List<FieldSpec> getFieldsSpecByPage(List<VariableElement> pageFields) {
        List<FieldSpec> fieldSpecs = new ArrayList<>();
        pageFields.forEach(field -> fieldSpecs.add(getFieldSpecFromField(field).build()));
        return fieldSpecs;
    }

    /*
    Собираем дефолтную спеку для создания полей
     */
    public FieldSpec.Builder getFieldSpecFromField(VariableElement field) {
        return FieldSpec.builder(SelenideAppiumElement.class, field.getSimpleName().toString())
            .addModifiers(Modifier.PRIVATE)
            .addAnnotations(annotationSpecsFromField(field));
    }

    /*
    Собираем все аннотации с поля в List AnnotationSpec
     */
    private List<AnnotationSpec> annotationSpecsFromField(VariableElement field) {
        List<AnnotationSpec> fieldAnnotations = new ArrayList<>();
        field.getAnnotationMirrors()
            .forEach(annotationMirror -> fieldAnnotations.add(AnnotationSpec.get(annotationMirror)));
        return fieldAnnotations;
    }


    private MethodSpec.Builder defaultMethodSpecBuilder(ExecutableElement method, VariableElement field, Page page,
        WidgetModel widget) {
        return MethodSpec.methodBuilder(
                field.getSimpleName().toString() + "_" + method.getSimpleName().toString())
            .addModifiers(Modifier.PUBLIC)
            .returns(ClassName.get(PACKAGE_NAME, page.getPageName()));
    }
}
