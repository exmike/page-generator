package annotation.generator;

import annotation.AutoGenerated;
import com.codeborne.selenide.appium.SelenideAppiumElement;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.TypeSpec;
import java.util.ArrayList;
import java.util.List;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.VariableElement;
import model.Page;

public class SpecsCreator {

    public TypeSpec.Builder getTypeSpecFromPage(Page page) {
        return TypeSpec.classBuilder(page.getPageName())
            .addModifiers(Modifier.PUBLIC)
            .addFields(getFieldsSpecByPage(page.getFields()))
            .addMethods(page.getMethodSpecs())
            .addAnnotation(AutoGenerated.class);
    }

    //собираем поля класса с типом SelenideAppiumElement и добавляем к ним аннотации для поиска элементов
    private List<FieldSpec> getFieldsSpecByPage(List<VariableElement> pageFields) {
        List<FieldSpec> fieldSpecs = new ArrayList<>();
        pageFields.forEach(field -> fieldSpecs.add(getFieldSpecFromField(field).build()));
        return fieldSpecs;
    }

    public FieldSpec.Builder getFieldSpecFromField(VariableElement field) {
        return FieldSpec.builder(SelenideAppiumElement.class, field.getSimpleName().toString())
            .addModifiers(Modifier.PRIVATE)
            .addAnnotations(annotationSpecsFromField(field));
    }

    //собираем все аннотации с поля в List
    private List<AnnotationSpec> annotationSpecsFromField(VariableElement field) {
        List<AnnotationSpec> fieldAnnotations = new ArrayList<>();
        field.getAnnotationMirrors()
            .forEach(annotationMirror -> fieldAnnotations.add(AnnotationSpec.get(annotationMirror)));
        return fieldAnnotations;
    }


}
